// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TravelGuide.Core.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelGuide.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Coordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<long>("LocationId");

                    b.Property<double>("Longitude");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("HoverIcon");

                    b.Property<string>("Icon");

                    b.Property<int>("LocationOrder");

                    b.Property<string>("LocationType");

                    b.Property<string>("Name");

                    b.Property<int>("Radius");

                    b.Property<long?>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.LocationImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMainImage");

                    b.Property<long>("LocationId");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationImages");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.RouteImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMainImage");

                    b.Property<string>("Path");

                    b.Property<long>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteImages");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<DateTimeOffset>("ExpireAt");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<bool>("IsOnline");

                    b.Property<int>("LoginSource");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<string>("SocialId");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.City", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Coordinate", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.Location", "Location")
                        .WithMany("Coordinates")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Location", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.Route")
                        .WithMany("Locations")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.LocationImage", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.Location", "Location")
                        .WithMany("LocationImages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.Route", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("TravelGuide.Core.Entities.RouteImage", b =>
                {
                    b.HasOne("TravelGuide.Core.Entities.Route", "Route")
                        .WithMany("RouteImages")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
